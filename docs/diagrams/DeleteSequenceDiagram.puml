@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":DeleteCommandParser" as DeleteCommandParser LOGIC_COLOR
participant "d:DeleteCommand" as DeleteCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

activate LogicManager

LogicManager -> AddressBookParser : parseCommand("delete ...")
activate AddressBookParser

create DeleteCommandParser
AddressBookParser -> DeleteCommandParser : parse(args)
activate DeleteCommandParser

alt args contain n/ (name prefixes)
  alt single name
    create DeleteCommand
    DeleteCommandParser -> DeleteCommand : new DeleteCommand(Name)
  else multiple names
    create DeleteCommand
    DeleteCommandParser -> DeleteCommand : new DeleteCommand(List<Name>, isConfirmed)
  end
else index provided
  create DeleteCommand
  DeleteCommandParser -> DeleteCommand : new DeleteCommand(Index)
end

DeleteCommandParser --> AddressBookParser : DeleteCommand
deactivate DeleteCommandParser
destroy DeleteCommandParser

AddressBookParser --> LogicManager : DeleteCommand
deactivate AddressBookParser

LogicManager -> DeleteCommand : execute(m)
activate DeleteCommand

alt delete by index
  DeleteCommand -> Model : deletePerson(personAt(Index))
  activate Model
  Model --> DeleteCommand : ok
  deactivate Model
  create CommandResult
  DeleteCommand -> CommandResult : new CommandResult("Deleted Person")
  activate CommandResult
  CommandResult --> DeleteCommand : CommandResult
  deactivate CommandResult
  DeleteCommand --> LogicManager : CommandResult
  deactivate DeleteCommand
else delete by single name
  DeleteCommand -> Model : find person by Name
  DeleteCommand -> Model : deletePerson(person)
  activate Model
  Model --> DeleteCommand : ok
  deactivate Model
  create CommandResult
  DeleteCommand -> CommandResult : new CommandResult("Deleted Person")
  activate CommandResult
  CommandResult --> DeleteCommand : CommandResult
  deactivate CommandResult
  DeleteCommand --> LogicManager : CommandResult
  deactivate DeleteCommand
else delete by multiple names
  DeleteCommand -> Model : resolve names to persons
  alt confirmation required (no confirm/yes)
    create CommandResult
    DeleteCommand -> CommandResult : new CommandResult(confirm prompt)
    activate CommandResult
    CommandResult --> DeleteCommand : CommandResult
    deactivate CommandResult
    DeleteCommand --> LogicManager : CommandResult
    deactivate DeleteCommand
  else confirmed
    loop for each person
      DeleteCommand -> Model : deletePerson(person)
      activate Model
      Model --> DeleteCommand : ok
      deactivate Model
    end
    create CommandResult
    DeleteCommand -> CommandResult : new CommandResult("Deleted N persons")
    activate CommandResult
    CommandResult --> DeleteCommand : CommandResult
    deactivate CommandResult
    DeleteCommand --> LogicManager : CommandResult
    deactivate DeleteCommand
  end
end

deactivate LogicManager
@enduml
